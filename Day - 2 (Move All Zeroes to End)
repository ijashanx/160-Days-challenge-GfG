## QUESTION 

You are given an array arr[] of non-negative integers. 
Your task is to move all the zeros in the array to the right end while maintaining the relative order of the non-zero elements.
The operation must be performed in place, meaning you should not use extra space for another array.

## TEST CASES

nput: arr[] = [1, 2, 0, 4, 3, 0, 5, 0]
Output: [1, 2, 4, 3, 5, 0, 0, 0]
Explanation: There are three 0s that are moved to the end.
Input: arr[] = [10, 20, 30]
Output: [10, 20, 30]
Explanation: No change in array as there are no 0s.
Input: arr[] = [0, 0]
Output: [0, 0]
Explanation: No change in array as there are all 0s.

## Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ arr[i] ≤ 105

## CODE

class Solution {
public:
    void pushZerosToEnd(vector<int>& arr) {
        stack<int> zeroStack; // Stack to store all zeroes
        int n = arr.size();

        // Step 1: Push all zeroes into the stack
        for (int i = 0; i < n; i++) {
            if (arr[i] == 0) {
                zeroStack.push(0);
            }
        }
        int index = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] != 0) {
                arr[index++] = arr[i];
            }
        }

        // Step 3: Append the zeroes from the stack back into the array
        while (!zeroStack.empty()) {
            arr[index++] = zeroStack.top();
            zeroStack.pop();
        }
    }
};

